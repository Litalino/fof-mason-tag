{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@xsoft/mason-tag/webpack/bootstrap","webpack://@xsoft/mason-tag/webpack/runtime/compat get default export","webpack://@xsoft/mason-tag/webpack/runtime/define property getters","webpack://@xsoft/mason-tag/webpack/runtime/hasOwnProperty shorthand","webpack://@xsoft/mason-tag/webpack/runtime/make namespace object","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/app']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Model']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@xsoft/mason-tag/./src/common/models/Answer.ts","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@xsoft/mason-tag/./src/common/models/Field.ts","webpack://@xsoft/mason-tag/./src/common/models/ByTag.ts","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/extend']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['components/Composer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Component']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@xsoft/mason-tag/./src/common/helpers/sortByAttribute.ts","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditDropdown.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditText.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditTags.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldGrid.js","webpack://@xsoft/mason-tag/./src/forum/helpers/chunkArray.ts","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditor.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorByTags.js","webpack://@xsoft/mason-tag/./src/forum/components/ByTagsComposer.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/components/TagDiscussionModal']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Button']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorModal.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@xsoft/mason-tag/./src/forum/components/FieldsViewer.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionPost.js","webpack://@xsoft/mason-tag/./src/forum/index.js","webpack://@xsoft/mason-tag/./src/forum/addComposerFields.js","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionHero.js","webpack://@xsoft/mason-tag/./src/forum/addFieldUpdateControl.js","webpack://@xsoft/mason-tag/./src/forum/patchModelIdentifier.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\nimport Field from './Field';\n\nexport default class Answer extends Model {\n    content = Model.attribute<string>('content');\n    is_suggested = Model.attribute<boolean>('is_suggested');\n    sort = Model.attribute<number | null>('sort');\n    field = Model.hasOne<Field>('field');\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\nimport Answer from './Answer';\n\nexport default class Field extends Model {\n    name = Model.attribute<string>('name');\n    description = Model.attribute<string | null>('description');\n    min_answers_count = Model.attribute<number>('min_answers_count');\n    max_answers_count = Model.attribute<number>('max_answers_count');\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\n    validation = Model.attribute<string | null>('validation');\n    icon = Model.attribute<string | null>('icon');\n    sort = Model.attribute<number | null>('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    allAnswers = Model.hasMany<Answer>('allAnswers');\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import Model from 'flarum/common/Model';\n\nexport default class ByTag extends Model {\n    tag_name = Model.attribute('tag_name');\n    tag_id = Model.attribute('tag_id');\n    field_name = Model.attribute('field_name');\n    switch = Model.attribute('switch');\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/bytags' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Composer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\n    if (!attr) attr = 'sort';\n    return items.sort((a, b) => a[attr]() - b[attr]());\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const { field, answers, onchange } = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        (field.suggestedAnswers() || []).forEach((answer) => {\n            const answerIndex = answers.findIndex((a) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        let relationshipInfo = {\n            field: {\n                data: Model.getIdentifier(this.field),\n            },\n        };\n\n        return (\n            <span className=\"Select\">\n                <select\n                    className=\"Select-input FormControl\"\n                    multiple={field.multiple()}\n                    onchange={(event) => {\n                        let answers = [];\n\n                        for (let option of event.target.options) {\n                            if (option.selected && option.value !== 'none') {\n                                const answerId = option.value;\n\n                                // This will only work with suggested answers for now\n                                // As they are the only ones registered in the store\n                                // answers.push(app.store.getById('mason-answers', answerId));\n\n                                // need to add field relationship in order to avoid JS error on\n                                // the text entry side\n                                let storeObj = app.store.getById('mason-answers', answerId);\n                                storeObj.data.relationships = relationshipInfo;\n                                answers.push(storeObj);\n                            }\n                        }\n\n                        onchange(answers);\n                    }}\n                >\n                    {!field.multiple() && (\n                        <option\n                            value=\"none\"\n                            selected={selectedAnswerIdsForThisField.length === 0}\n                            disabled={field.required()}\n                            hidden={this.placeholderHidden(field)}\n                        >\n                            {this.selectPlaceholder(field)}\n                        </option>\n                    )}\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\n                            {answer.content()}\n                        </option>\n                    ))}\n                </select>\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\n            </span>\n        );\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Component from 'flarum/common/Component';\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n        this.inputId = 'FormControl mason-input-' + this.attrs.inputId;\n\n        this.content = '';\n        var answersForThisField = [];\n\n        if (typeof this.answers === 'undefined') {\n            answersForThisField = false;\n        } else {\n            answersForThisField = this.answers.filter((answer) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof answer === 'undefined') {\n                    return false;\n                }\n\n                return answer.field().id() === this.field.id();\n            });\n        }\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return (\n            <input\n                className=\"FormControl\"\n                required={this.field.required()}\n                value={this.content}\n                class={this.inputId}\n                oninput={(e) => {\n                    this.content = e.target.value;\n\n                    if (this.content === '') {\n                        this.onchange([]);\n                    } else {\n                        const answer = app.store.createRecord('mason-answers', {\n                            attributes: {\n                                content: this.content,\n                            },\n                            relationships: {\n                                field: {\n                                    data: Model.getIdentifier(this.field),\n                                },\n                            },\n                        });\n\n                        this.onchange([answer]);\n                    }\n                }}\n                placeholder={this.fieldPlaceholder()}\n            />\n        );\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport classList from 'flarum/common/utils/classList';\n\nexport default class DiscussionFields extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n\n        this.inputUuid = Math.random().toString(36).substring(2);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return <div className=\"Alert\">{app.translator.trans('xsoft-mason-tag.forum.tags.inadequate-settings')}</div>;\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\n        const inputUuid = this.inputUuid;\n        const required = this.fieldRequired();\n\n        return (\n            <div\n                className={classList('Mason-Field Form-group', {\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                })}\n            >\n                <label for={`fofMasonTag-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\n                <span className=\"Select\">\n                    <select\n                        className=\"Select-input FormControl\"\n                        id={`fofMasonTag-selectInput-${inputUuid}`}\n                        onchange={(event) => {\n                            const id = event.target.value;\n\n                            this.selectedTags = [];\n\n                            if (id !== 'none') {\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\n\n                                const parent = this.selectedTags[0].parent();\n                                if (parent) {\n                                    this.selectedTags.push(parent);\n                                }\n                            }\n\n                            this.attrs.onchange(this.selectedTags);\n                        }}\n                    >\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\n                            {this.selectPlaceholder()}\n                        </option>\n                        {this.tags.map((tag) => {\n                            const parent = tag.parent();\n\n                            return (\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\n                                </option>\n                            );\n                        })}\n                        ,\n                    </select>\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\n                </span>\n            </div>\n        );\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('xsoft-mason-tag.tags-field-name') || app.translator.trans('xsoft-mason-tag.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport chunkArray from '../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return (\n            <div className=\"Mason-Grid-Wrapper\">\n                <div className=\"Mason-Grid\">\n                    {chunkArray(this.attrs.items, app.forum.attribute('xsoft-mason-tag.column-count')).map((row) => (\n                        <div className=\"Mason-Row Form-group\">\n                            {row.map((item) => (item))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size.\n *\n * Useful for grid layouts.\n *\n * @see https://stackoverflow.com/a/64777515/11091039\n * @param arr Array of items\n * @param size Number of items per array\n */\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\n    return Array(Math.ceil(arr.length / size))\n        .fill(undefined)\n        .map((_, i) => arr.slice(size * i, size + size * i));\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\n            items.add(\n                'tags',\n                <FieldEditTags\n                    discussion={this.attrs.discussion}\n                    onchange={(tags) => {\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\n                    }}\n                />\n            );\n        }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div\n                    class={classList('Mason-Field Form-group', {\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                    })}\n                >\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                        {field.required() ? ' *' : null}\n                    </label>\n                    {input}\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditorByTags extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        // taking this feature off beacuse changing tags will affect which fields show up\n\n        // if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\n        //     items.add(\n        //         'tags',\n        //         <FieldEditTags\n        //             discussion={this.attrs.discussion}\n        //             onchange={(tags) => {\n        //                 this.attrs.ontagchange && this.attrs.ontagchange(tags);\n        //             }}\n        //         />\n        //     );\n        // }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                bytags: this.attrs.bytags,\n                inputId: field.data.id,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            this.attrs.bytags.forEach((tag) => {\n                // filter the items list for fields we actually need\n                if (tag == field.data.attributes.name) {\n                    items.add(\n                        `field-${field.id()}`,\n                        <div\n                            class={classList('Mason-Field Form-group', {\n                                ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                            })}\n                        >\n                            <label>\n                                {field.icon() ? <>{icon(field.icon())} </> : null}\n                                {field.name()}\n                                {field.required() ? ' *' : null}\n                            </label>\n                            {input}\n                            {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                        </div>\n                    );\n                }\n            });\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\n\nexport default class ByTagsComposer extends Component {\n    matchTags() {\n        // build an array of Tags with the fields that match them\n\n        const tags = app.store.all('tags');\n        let tagsList = [];\n\n        let tempStorage = app.store.all('mason-bytags');\n        var usedList = [];\n\n        for (let i = 0; i < tags.length; i++) {\n            let fields = [];\n            let fieldIDs = [];\n            var tagName = tags[i].data.attributes.name;\n            let tagsObj = {};\n\n            usedList = tempStorage.filter((match) => match.data.attributes.tag_name == tagName && match.data.attributes.switch == true);\n\n            // It may be better to create an object with all the Tags represented\n            // even if they have no fields enabled. Turn this conditional back off if so.\n            if (usedList[0]) {\n                usedList.forEach(function (e) {\n                    fields.push(e.data.attributes.field_name);\n                    fieldIDs.push(e.data.id);\n                });\n\n                tagsObj = { tagName, fields, fieldIDs };\n                tagsList.push(tagsObj);\n            }\n        }\n\n        return tagsList;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/components/TagDiscussionModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\nimport FieldsEditorByTags from './FieldsEditorByTags';\nimport ByTagsComposer from './ByTagsComposer';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n        this.tagRelationship = this.attrs.discussion.data.relationships.tags.data[0];\n        this.byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\n\n        // Stays null if the feature is not used\n        this.tags = null;\n\n        let ByTagsUnit = new ByTagsComposer();\n        const matchingTags = ByTagsUnit.matchTags();\n        this.myFields = [];\n\n        // annoying way to get current Tag name, but it works\n        let thisIncludes = this.attrs.discussion.payload.included;\n        const findTag = thisIncludes.find((element) => element.type == 'tags');\n\n        for (let i = 0; i < matchingTags.length; i++) {\n            if (matchingTags[i].tagName == findTag.attributes.name) {\n                this.myFields = matchingTags[i].fields;\n            }\n        }\n    }\n\n    title() {\n        return app.translator.trans('xsoft-mason-tag.forum.answers-modal.edit-title', {\n            title: <em>{this.attrs.discussion.title()}</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    {\n                        this.byTagEnabled ?\n                        <FieldsEditorByTags\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            bytags={this.myFields}\n                            tags={this.tags}\n                            onchange={this.answersChanged.bind(this)}\n                        />\n                        :\n                        <FieldsEditor\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            onchange={this.answersChanged.bind(this)}\n                            ontagchange={(tags) => {\n                                this.tags = tags;\n                                this.dirty = true;\n                            }}\n                        />\n                    }\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('xsoft-mason-tag.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let tagRelationship = {\n            data: this.tagRelationship,\n        };\n        let relationships = {\n            tags: [tagRelationship],\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        // if (this.tags !== null) {\n        //     relationships.tags = this.tags;\n        // }\n\n        // Use a temporary discussion object\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\n        const temporaryDiscussion = app.store.createRecord('discussions');\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\n        temporaryDiscussion.exists = true;\n\n        temporaryDiscussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionHero'];","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('xsoft-mason-tag.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return <div />;\n        }\n\n        return (\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\n                {head}\n                <FieldGrid items={fields} />\n            </div>\n        );\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'edit',\n                <Button\n                    className=\"Button Mason-Fields--edit\"\n                    icon=\"fas fa-pen\"\n                    onclick={() =>\n                        app.modal.show(FieldsEditorModal, {\n                            discussion: this.discussion,\n                        })\n                    }\n                >\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach((field) => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(\n                (this.discussion.masonAnswers() || []).filter((answer) => {\n                    // It's necessary to compare the field() relationship\n                    // Because field.suggestedAnswers() won't contain new and user answers\n                    return answer.field() && answer.field().id() === field.id();\n                })\n            );\n\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('xsoft-mason-tag.forum.post-answers.no-answer')}</em>);\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div className=\"Mason-Field Form-group\">\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                    </label>\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionPage'];","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/common/components/CommentPost';\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('xsoft-mason-tag.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || [])\n                .map((answer) => {\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                    if (!answer) {\n                        return '';\n                    }\n\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                    return JSON.stringify([answer.id(), !!answer.field()]);\n                })\n                .join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport Answer from '@common/models/Answer';\nimport Field from '@common/models/Field';\nimport ByTag from '@common/models/ByTag';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from './patchModelIdentifier';\n\napp.initializers.add('xsoft-ict-mason-tag', (app) => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n    app.store.models['mason-bytags'] = ByTag;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport Composer from 'flarum/components/Composer';\nimport FieldsEditor from './components/FieldsEditor';\nimport FieldsEditorByTags from './components/FieldsEditorByTags';\nimport ByTagsComposer from './components/ByTagsComposer';\nimport TagDiscussionModal from 'flarum/tags/components/TagDiscussionModal';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n    let byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\n    let ByTagsUnit = new ByTagsComposer();\n    let dTag = '';\n    var tagChanged = '';\n\n    extend(TagDiscussionModal.prototype, 'onsubmit', function (e) {\n        // get name of the tag selected in the modal\n\n        if (this.selected == false) {\n            // if no tag is selected, empty the header\n            dTag = '';\n            return;\n        }\n\n        dTag = this.selected[0].data.attributes.name;\n    });\n\n    extend(Composer.prototype, 'hide', function (e) {\n        // remove the the fields from the headerItems...\n        dTag = '';\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        // so this list contains whether a tag has fields!\n        const matchingTags = ByTagsUnit.matchTags();\n\n        if (byTagEnabled) {\n            this.myFields = [];\n\n            for (let i = 0; i < matchingTags.length; i++) {\n                if (matchingTags[i].tagName == dTag) {\n                    this.myFields = matchingTags[i].fields;\n                }\n            }\n            // this.myFields is a list of fields that match the selected tag only\n\n            if (tagChanged != dTag) {\n                // clear the decks after every tag change\n                this.composer.fields.masonAnswers = [];\n                tagChanged = dTag;\n            }\n\n            items.add(\n                'mason-fields',\n                <FieldsEditorByTags\n                    bytags={this.myFields}\n                    tags={this.composer.fields.tags}\n                    answers={this.composer.fields.masonAnswers || []}\n                    onchange={(answers) => {\n                        this.composer.fields.masonAnswers = answers;\n                    }}\n                />\n            );\n        } else {\n            items.add(\n                'mason-fields',\n                <FieldsEditor\n                    answers={this.composer.fields.masonAnswers || []}\n                    onchange={(answers) => {\n                        this.composer.fields.masonAnswers = answers;\n                    }}\n                    ontagchange={(tags) => {\n                        this.composer.fields.tags = tags;\n                    }}\n                />\n            );\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\n    });\n}\n","import { extend, override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\nimport Composer from 'flarum/components/Composer';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('xsoft-mason-tag.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\n    });\n\n    override(Composer.prototype, 'animateToPosition', function (original, position) {\n        // we need to detect if there are any mason fields present and if there are\n        // add their height to the default height of the composer window\n        const $composer = this.$().stop(true);\n        const composerHeight = $composer.outerHeight();\n        m.redraw(true);\n        $composer.show();\n\n        //const $composer = this.$();\n        const headerHeight = this.$('.ComposerBody-header').outerHeight();\n\n        if (position === Composer.PositionEnum.NORMAL && composerHeight < headerHeight) {\n            this.height = headerHeight + composerHeight;\n            this.updateHeight();\n        }\n\n        return original(position);\n    });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'mason-update-answers',\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n    });\n}\n","import { override } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Answer from '@common/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    });\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Answer","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","content","Model","is_suggested","sort","field","apiEndpoint","this","exists","data","id","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","allAnswers","suggestedAnswers","required","computed","multiple","ByTag","tag_name","tag_id","field_name","sortByAttribute","items","attr","b","FieldEditDropdown","_Component","_proto","view","vnode","_vnode$attrs","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","relationshipInfo","m","className","event","_step","_iterator","_createForOfIteratorHelperLoose","target","options","done","option","selected","answerId","storeObj","app","relationships","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","text","Component","FieldEditText","oninit","inputId","answersForThisField","filter","_this2","class","oninput","e","attributes","placeholder","fieldPlaceholder","DiscussionFields","tags","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","inputUuid","Math","random","toString","substring","_classList","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","ceil","fill","undefined","_","i","slice","row","item","FieldsEditor","fields","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","ItemList","add","_this3","FieldEditTags","ontagchange","input","inputAttrs","'['","FieldsEditorByTags","bytags","ByTagsComposer","matchTags","tagsList","tempStorage","usedList","_loop","fieldIDs","tagName","tagsObj","match","FieldsEditorModal","_Modal","masonAnswers","dirty","processing","tagRelationship","byTagEnabled","matchingTags","myFields","findTag","payload","included","element","type","title","answersChanged","Button","loading","onclick","saveAnswers","temporaryDiscussion","pushData","save","then","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","answer_list","showFieldsOnPost","post","DiscussionPage","number","store","models","Discussion","Forum","DiscussionComposer","ByTagsUnit","dTag","tagChanged","extend","TagDiscussionModal","Composer","composer","addComposerFields","DiscussionHero","canSeeMasonAnswers","override","original","position","$composer","$","stop","composerHeight","outerHeight","show","headerHeight","height","updateHeight","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","model"],"sourceRoot":""}