{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@xsoft/mason-tag/./src/common/helpers/sortByAttribute.ts","webpack://@xsoft/mason-tag/./src/common/models/Answer.ts","webpack://@xsoft/mason-tag/./src/common/models/ByTag.ts","webpack://@xsoft/mason-tag/./src/common/models/Field.ts","webpack://@xsoft/mason-tag/./src/forum/addComposerFields.js","webpack://@xsoft/mason-tag/./src/forum/addFieldUpdateControl.js","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionHero.js","webpack://@xsoft/mason-tag/./src/forum/addFieldsOnDiscussionPost.js","webpack://@xsoft/mason-tag/./src/forum/components/ByTagsComposer.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditDropdown.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditTags.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldEditText.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldGrid.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditor.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorByTags.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsEditorModal.js","webpack://@xsoft/mason-tag/./src/forum/components/FieldsViewer.js","webpack://@xsoft/mason-tag/./src/forum/helpers/chunkArray.ts","webpack://@xsoft/mason-tag/./src/forum/index.js","webpack://@xsoft/mason-tag/./src/forum/patchModelIdentifier.js","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Component']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/Model']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Button']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/extend']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['components/Composer']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/app']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/components/TagDiscussionModal']\"","webpack://@xsoft/mason-tag/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@xsoft/mason-tag/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@xsoft/mason-tag/webpack/bootstrap","webpack://@xsoft/mason-tag/webpack/runtime/compat get default export","webpack://@xsoft/mason-tag/webpack/runtime/define property getters","webpack://@xsoft/mason-tag/webpack/runtime/hasOwnProperty shorthand","webpack://@xsoft/mason-tag/webpack/runtime/make namespace object"],"sourcesContent":["export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\n    if (!attr) attr = 'sort';\n    return items.sort((a, b) => a[attr]() - b[attr]());\n}\n","import Model from 'flarum/common/Model';\nimport Field from './Field';\n\nexport default class Answer extends Model {\n    content = Model.attribute<string>('content');\n    is_suggested = Model.attribute<boolean>('is_suggested');\n    sort = Model.attribute<number | null>('sort');\n    field = Model.hasOne<Field>('field');\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import Model from 'flarum/common/Model';\n\nexport default class ByTag extends Model {\n    tag_name = Model.attribute('tag_name');\n    tag_id = Model.attribute('tag_id');\n    field_name = Model.attribute('field_name');\n    switch = Model.attribute('switch');\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/bytags' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import Model from 'flarum/common/Model';\nimport computed from 'flarum/common/utils/computed';\nimport Answer from './Answer';\n\nexport default class Field extends Model {\n    name = Model.attribute<string>('name');\n    description = Model.attribute<string | null>('description');\n    min_answers_count = Model.attribute<number>('min_answers_count');\n    max_answers_count = Model.attribute<number>('max_answers_count');\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\n    validation = Model.attribute<string | null>('validation');\n    icon = Model.attribute<string | null>('icon');\n    sort = Model.attribute<number | null>('sort');\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\n    allAnswers = Model.hasMany<Answer>('allAnswers');\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\n\n    apiEndpoint() {\n        return '/xsoft/mason-tag/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport Composer from 'flarum/components/Composer';\nimport FieldsEditor from './components/FieldsEditor';\nimport FieldsEditorByTags from './components/FieldsEditorByTags';\nimport ByTagsComposer from './components/ByTagsComposer';\nimport TagDiscussionModal from 'flarum/tags/components/TagDiscussionModal';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n    let byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\n    let ByTagsUnit = new ByTagsComposer();\n    let dTag = '';\n    var tagChanged = '';\n\n    extend(TagDiscussionModal.prototype, 'onsubmit', function (e) {\n        // get name of the tag selected in the modal\n\n        if (this.selected == false) {\n            // if no tag is selected, empty the header\n            dTag = '';\n            return;\n        }\n\n        dTag = this.selected[0].data.attributes.name;\n    });\n\n    extend(Composer.prototype, 'hide', function (e) {\n        // remove the the fields from the headerItems...\n        dTag = '';\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        // so this list contains whether a tag has fields!\n        const matchingTags = ByTagsUnit.matchTags();\n\n        if (byTagEnabled) {\n            this.myFields = [];\n\n            for (let i = 0; i < matchingTags.length; i++) {\n                if (matchingTags[i].tagName == dTag) {\n                    this.myFields = matchingTags[i].fields;\n                }\n            }\n            // this.myFields is a list of fields that match the selected tag only\n\n            if (tagChanged != dTag) {\n                // clear the decks after every tag change\n                this.composer.fields.masonAnswers = [];\n                tagChanged = dTag;\n            }\n\n            items.add(\n                'mason-fields',\n                <FieldsEditorByTags\n                    bytags={this.myFields}\n                    tags={this.composer.fields.tags}\n                    answers={this.composer.fields.masonAnswers || []}\n                    onchange={(answers) => {\n                        this.composer.fields.masonAnswers = answers;\n                    }}\n                />\n            );\n        } else {\n            items.add(\n                'mason-fields',\n                <FieldsEditor\n                    answers={this.composer.fields.masonAnswers || []}\n                    onchange={(answers) => {\n                        this.composer.fields.masonAnswers = answers;\n                    }}\n                    ontagchange={(tags) => {\n                        this.composer.fields.tags = tags;\n                    }}\n                />\n            );\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\n    });\n}\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './components/FieldsEditorModal';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'mason-update-answers',\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n    });\n}\n","import { extend, override } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\nimport Composer from 'flarum/components/Composer';\nimport FieldsViewer from './components/FieldsViewer';\n\nexport default function () {\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('xsoft-mason-tag.fields-in-hero')) {\n            return;\n        }\n\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\n    });\n\n    override(Composer.prototype, 'animateToPosition', function (original, position) {\n        // we need to detect if there are any mason fields present and if there are\n        // add their height to the default height of the composer window\n        const $composer = this.$().stop(true);\n        const composerHeight = $composer.outerHeight();\n        m.redraw(true);\n        $composer.show();\n\n        //const $composer = this.$();\n        const headerHeight = this.$('.ComposerBody-header').outerHeight();\n\n        if (position === Composer.PositionEnum.NORMAL && composerHeight < headerHeight) {\n            this.height = headerHeight + composerHeight;\n            this.updateHeight();\n        }\n\n        return original(position);\n    });\n}\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/common/components/CommentPost';\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\nimport FieldsViewer from './components/FieldsViewer';\n\nfunction showFieldsOnPost(post) {\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\n    if (!app.current.matches(DiscussionPage)) {\n        return false;\n    }\n\n    // We only add fields to the first post, and only if fields are not displayed in the hero\n    // TODO: what if the first post is deleted ?\n    return post.number() === 1 && !app.forum.attribute('xsoft-mason-tag.fields-in-hero');\n}\n\nexport default function () {\n    extend(CommentPost.prototype, 'oninit', function () {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        this.subtree.check(() => {\n            // Create a string with all answer ids\n            // If answers change this string will be different\n            return (this.attrs.post.discussion().masonAnswers() || [])\n                .map((answer) => {\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\n                    if (!answer) {\n                        return '';\n                    }\n\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\n                    return JSON.stringify([answer.id(), !!answer.field()]);\n                })\n                .join(',');\n        });\n    });\n\n    extend(CommentPost.prototype, 'content', function (content) {\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\n            return;\n        }\n\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\n\n        // Insert the new content just after the header\n        // or at the very beginning if the header is not found\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\n    });\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\n\nexport default class ByTagsComposer extends Component {\n    matchTags() {\n        // build an array of Tags with the fields that match them\n\n        const tags = app.store.all('tags');\n        let tagsList = [];\n\n        let tempStorage = app.store.all('mason-bytags');\n        var usedList = [];\n\n        for (let i = 0; i < tags.length; i++) {\n            let fields = [];\n            let fieldIDs = [];\n            var tagName = tags[i].data.attributes.name;\n            let tagsObj = {};\n\n            usedList = tempStorage.filter((match) => match.data.attributes.tag_name == tagName && match.data.attributes.switch == true);\n\n            // It may be better to create an object with all the Tags represented\n            // even if they have no fields enabled. Turn this conditional back off if so.\n            if (usedList[0]) {\n                usedList.forEach(function (e) {\n                    fields.push(e.data.attributes.field_name);\n                    fieldIDs.push(e.data.id);\n                });\n\n                tagsObj = { tagName, fields, fieldIDs };\n                tagsList.push(tagsObj);\n            }\n        }\n\n        return tagsList;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldEditDropdown extends Component {\n    view(vnode) {\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\n        const { field, answers, onchange } = vnode.attrs;\n\n        let selectedAnswerIdsForThisField = [];\n\n        (field.suggestedAnswers() || []).forEach((answer) => {\n            const answerIndex = answers.findIndex((a) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof a === 'undefined') {\n                    return false;\n                }\n\n                return a.id() === answer.id();\n            });\n\n            if (answerIndex !== -1) {\n                selectedAnswerIdsForThisField.push(answer.id());\n            }\n        });\n\n        let relationshipInfo = {\n            field: {\n                data: Model.getIdentifier(this.field),\n            },\n        };\n\n        return (\n            <span className=\"Select\">\n                <select\n                    className=\"Select-input FormControl\"\n                    multiple={field.multiple()}\n                    onchange={(event) => {\n                        let answers = [];\n\n                        for (let option of event.target.options) {\n                            if (option.selected && option.value !== 'none') {\n                                const answerId = option.value;\n\n                                // This will only work with suggested answers for now\n                                // As they are the only ones registered in the store\n                                // answers.push(app.store.getById('mason-answers', answerId));\n\n                                // need to add field relationship in order to avoid JS error on\n                                // the text entry side\n                                let storeObj = app.store.getById('mason-answers', answerId);\n                                storeObj.data.relationships = relationshipInfo;\n                                answers.push(storeObj);\n                            }\n                        }\n\n                        onchange(answers);\n                    }}\n                >\n                    {!field.multiple() && (\n                        <option\n                            value=\"none\"\n                            selected={selectedAnswerIdsForThisField.length === 0}\n                            disabled={field.required()}\n                            hidden={this.placeholderHidden(field)}\n                        >\n                            {this.selectPlaceholder(field)}\n                        </option>\n                    )}\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\n                            {answer.content()}\n                        </option>\n                    ))}\n                </select>\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\n            </span>\n        );\n    }\n\n    placeholderHidden(field) {\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return false;\n        }\n\n        return field.required();\n    }\n\n    selectPlaceholder(field) {\n        let text = '';\n\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            text += field.name();\n\n            if (field.required()) {\n                text += ' *';\n            }\n\n            text += ' - ';\n        }\n\n        if (field.required()) {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport Component from 'flarum/common/Component';\nimport sortTags from 'flarum/tags/utils/sortTags';\nimport classList from 'flarum/common/utils/classList';\n\nexport default class DiscussionFields extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.tags = app.store.all('tags');\n        this.selectedTags = [];\n\n        if (this.attrs.discussion) {\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\n\n            this.selectedTags = this.attrs.discussion.tags();\n        } else {\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\n        }\n\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\n\n        // If primary tags are disabled, don't offer them\n        if (this.maxPrimary <= 0) {\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\n        }\n\n        // If secondary tags are disabled, don't offer them\n        if (this.maxSecondary <= 0) {\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\n        }\n\n        this.tags = sortTags(this.tags);\n\n        this.inputUuid = Math.random().toString(36).substring(2);\n    }\n\n    view() {\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\n            return <div className=\"Alert\">{app.translator.trans('xsoft-mason-tag.forum.tags.inadequate-settings')}</div>;\n        }\n\n        // We take the first child selected or if none, the first parent selected\n        // Of course this only works if a single tag or tag+parent is selected\n        // Multiple tags are not supported on this selector\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\n        const inputUuid = this.inputUuid;\n        const required = this.fieldRequired();\n\n        return (\n            <div\n                className={classList('Mason-Field Form-group', {\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                })}\n            >\n                <label for={`fofMasonTag-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\n                <span className=\"Select\">\n                    <select\n                        className=\"Select-input FormControl\"\n                        id={`fofMasonTag-selectInput-${inputUuid}`}\n                        onchange={(event) => {\n                            const id = event.target.value;\n\n                            this.selectedTags = [];\n\n                            if (id !== 'none') {\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\n\n                                const parent = this.selectedTags[0].parent();\n                                if (parent) {\n                                    this.selectedTags.push(parent);\n                                }\n                            }\n\n                            this.attrs.onchange(this.selectedTags);\n                        }}\n                    >\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\n                            {this.selectPlaceholder()}\n                        </option>\n                        {this.tags.map((tag) => {\n                            const parent = tag.parent();\n\n                            return (\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\n                                </option>\n                            );\n                        })}\n                        ,\n                    </select>\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\n                </span>\n            </div>\n        );\n    }\n\n    fieldRequired() {\n        return this.minPrimary > 0 || this.minSecondary > 0;\n    }\n\n    fieldLabel() {\n        let text = app.forum.attribute('xsoft-mason-tag.tags-field-name') || app.translator.trans('xsoft-mason-tag.forum.tags.tags-label');\n\n        if (this.fieldRequired()) {\n            text += ' *';\n        }\n\n        return text;\n    }\n\n    placeholderHidden() {\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return false;\n        }\n\n        return this.fieldRequired();\n    }\n\n    selectPlaceholder() {\n        let text = '';\n\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            text += this.fieldLabel() + ' - ';\n        }\n\n        if (this.fieldRequired()) {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.choose-option');\n        } else {\n            text += app.translator.trans('xsoft-mason-tag.forum.answers.no-option-selected');\n        }\n\n        return text;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Component from 'flarum/common/Component';\n\nexport default class FieldEditText extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.field = this.attrs.field;\n        this.answers = this.attrs.answers;\n        this.onchange = this.attrs.onchange;\n        this.inputId = 'FormControl mason-input-' + this.attrs.inputId;\n\n        this.content = '';\n        var answersForThisField = [];\n\n        if (typeof this.answers === 'undefined') {\n            answersForThisField = false;\n        } else {\n            answersForThisField = this.answers.filter((answer) => {\n                // Temporary store entries seem to turn into undefined after saving\n                if (typeof answer === 'undefined') {\n                    return false;\n                }\n\n                return answer.field().id() === this.field.id();\n            });\n        }\n\n        if (answersForThisField.length) {\n            // For now we only support a single custom answer\n            this.content = answersForThisField[0].content();\n        }\n    }\n\n    view() {\n        return (\n            <input\n                className=\"FormControl\"\n                required={this.field.required()}\n                value={this.content}\n                class={this.inputId}\n                oninput={(e) => {\n                    this.content = e.target.value;\n\n                    if (this.content === '') {\n                        this.onchange([]);\n                    } else {\n                        const answer = app.store.createRecord('mason-answers', {\n                            attributes: {\n                                content: this.content,\n                            },\n                            relationships: {\n                                field: {\n                                    data: Model.getIdentifier(this.field),\n                                },\n                            },\n                        });\n\n                        this.onchange([answer]);\n                    }\n                }}\n                placeholder={this.fieldPlaceholder()}\n            />\n        );\n    }\n\n    fieldPlaceholder() {\n        if (app.forum.attribute('xsoft-mason-tag.labels-as-placeholders')) {\n            return this.field.name() + (this.field.required() ? ' *' : '');\n        }\n\n        return '';\n    }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport chunkArray from '../helpers/chunkArray';\n\nexport default class FieldGrid extends Component {\n    view() {\n        return (\n            <div className=\"Mason-Grid-Wrapper\">\n                <div className=\"Mason-Grid\">\n                    {chunkArray(this.attrs.items, app.forum.attribute('xsoft-mason-tag.column-count')).map((row) => (\n                        <div className=\"Mason-Row Form-group\">\n                            {row.map((item) => (item))}\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditor extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\n            items.add(\n                'tags',\n                <FieldEditTags\n                    discussion={this.attrs.discussion}\n                    onchange={(tags) => {\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\n                    }}\n                />\n            );\n        }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div\n                    class={classList('Mason-Field Form-group', {\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                    })}\n                >\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                        {field.required() ? ' *' : null}\n                    </label>\n                    {input}\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport classList from 'flarum/common/utils/classList';\n\nimport sortByAttribute from '@common/helpers/sortByAttribute';\nimport FieldEditDropdown from './FieldEditDropdown';\nimport FieldEditText from './FieldEditText';\nimport FieldEditTags from './FieldEditTags';\nimport FieldGrid from './FieldGrid';\n\nexport default class FieldsEditorByTags extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n\n        // Index to quickly do a reverse lookup from answer to field\n        this.answerToFieldIndex = [];\n        this.fields.forEach((field) => {\n            const answers = field.suggestedAnswers();\n\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\n            // where we log a warning if the relationship appears to be missing\n            // This should help troubleshooting what happens if no answers are offered\n            if (!Array.isArray(answers)) {\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\n\n                return;\n            }\n\n            answers.forEach((answer) => {\n                this.answerToFieldIndex[answer.id()] = field.id();\n            });\n        });\n    }\n\n    view() {\n        return (\n            <div className=\"Mason-Fields Mason-Fields--editor\">\n                {this.headItems().toArray()}\n                <FieldGrid items={this.fieldItems().toArray()} />\n            </div>\n        );\n    }\n\n    updateSelection(field, fieldAnswers) {\n        // Keep only answers to other fields\n        let answers = this.attrs.answers.filter((answer) => {\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\n\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\n            // In that case the field should be linked in the relationship\n            if (typeof reverseFieldLookup === 'undefined') {\n                return answer.field().id() !== field.id();\n            }\n\n            return reverseFieldLookup !== field.id();\n        });\n\n        answers = answers.concat(fieldAnswers);\n\n        this.attrs.onchange(answers);\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n        return items;\n    }\n\n    fieldItems() {\n        const items = new ItemList();\n\n        // taking this feature off beacuse changing tags will affect which fields show up\n\n        // if (app.forum.attribute('xsoft-mason-tag.tags-as-fields')) {\n        //     items.add(\n        //         'tags',\n        //         <FieldEditTags\n        //             discussion={this.attrs.discussion}\n        //             onchange={(tags) => {\n        //                 this.attrs.ontagchange && this.attrs.ontagchange(tags);\n        //             }}\n        //         />\n        //     );\n        // }\n\n        this.fields.forEach((field) => {\n            const inputAttrs = {\n                field,\n                bytags: this.attrs.bytags,\n                inputId: field.data.id,\n                answers: this.attrs.answers,\n                onchange: (fieldAnswers) => {\n                    // Every input component calls \"onchange\" with a list of answers from the store\n                    this.updateSelection(field, fieldAnswers);\n                },\n            };\n            let input = null;\n\n            if (field.user_values_allowed()) {\n                input = <FieldEditText {...inputAttrs} />;\n            } else {\n                input = <FieldEditDropdown {...inputAttrs} />;\n            }\n\n            this.attrs.bytags.forEach((tag) => {\n                // filter the items list for fields we actually need\n                if (tag == field.data.attributes.name) {\n                    items.add(\n                        `field-${field.id()}`,\n                        <div\n                            class={classList('Mason-Field Form-group', {\n                                ['Mason-Field--label-as-placeholder']: app.forum.attribute('xsoft-mason-tag.labels-as-placeholders'),\n                            })}\n                        >\n                            <label>\n                                {field.icon() ? <>{icon(field.icon())} </> : null}\n                                {field.name()}\n                                {field.required() ? ' *' : null}\n                            </label>\n                            {input}\n                            {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\n                        </div>\n                    );\n                }\n            });\n        });\n\n        return items;\n    }\n}\n","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\nimport FieldsEditorByTags from './FieldsEditorByTags';\nimport ByTagsComposer from './ByTagsComposer';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n        this.tagRelationship = this.attrs.discussion.data.relationships.tags.data[0];\n        this.byTagEnabled = app.data.resources[0].attributes['xsoft-mason-tag.by-tag'];\n\n        // Stays null if the feature is not used\n        this.tags = null;\n\n        let ByTagsUnit = new ByTagsComposer();\n        const matchingTags = ByTagsUnit.matchTags();\n        this.myFields = [];\n\n        // annoying way to get current Tag name, but it works\n        let thisIncludes = this.attrs.discussion.payload.included;\n        const findTag = thisIncludes.find((element) => element.type == 'tags');\n\n        for (let i = 0; i < matchingTags.length; i++) {\n            if (matchingTags[i].tagName == findTag.attributes.name) {\n                this.myFields = matchingTags[i].fields;\n            }\n        }\n    }\n\n    title() {\n        return app.translator.trans('xsoft-mason-tag.forum.answers-modal.edit-title', {\n            title: <em>{this.attrs.discussion.title()}</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    {\n                        this.byTagEnabled ?\n                        <FieldsEditorByTags\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            bytags={this.myFields}\n                            tags={this.tags}\n                            onchange={this.answersChanged.bind(this)}\n                        />\n                        :\n                        <FieldsEditor\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            onchange={this.answersChanged.bind(this)}\n                            ontagchange={(tags) => {\n                                this.tags = tags;\n                                this.dirty = true;\n                            }}\n                        />\n                    }\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('xsoft-mason-tag.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let tagRelationship = {\n            data: this.tagRelationship,\n        };\n        let relationships = {\n            tags: [tagRelationship],\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        // if (this.tags !== null) {\n        //     relationships.tags = this.tags;\n        // }\n\n        // Use a temporary discussion object\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\n        const temporaryDiscussion = app.store.createRecord('discussions');\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\n        temporaryDiscussion.exists = true;\n\n        temporaryDiscussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","import app from 'flarum/forum/app';\nimport icon from 'flarum/common/helpers/icon';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Component from 'flarum/common/Component';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditorModal from './FieldsEditorModal';\nimport FieldGrid from './FieldGrid';\nimport sortByAttribute from '@common/helpers/sortByAttribute';\n\nexport default class FieldsViewer extends Component {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\n        this.discussion = this.attrs.discussion;\n    }\n\n    view() {\n        const head = this.headItems().toArray();\n        const fields = this.fieldsItems().toArray();\n\n        // If all fields are hidden\n        // And either no controls are shown or the setting hides them\n        // We don't show the viewer\n        if (!fields.length && (!head.length || app.forum.attribute('xsoft-mason-tag.hide-empty-fields-section'))) {\n            // We need to return an actual dom element or Flarum does not like it\n            return <div />;\n        }\n\n        return (\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\n                {head}\n                <FieldGrid items={fields} />\n            </div>\n        );\n    }\n\n    headItems() {\n        const items = new ItemList();\n\n        if (this.discussion.canUpdateMasonAnswers()) {\n            items.add(\n                'edit',\n                <Button\n                    className=\"Button Mason-Fields--edit\"\n                    icon=\"fas fa-pen\"\n                    onclick={() =>\n                        app.modal.show(FieldsEditorModal, {\n                            discussion: this.discussion,\n                        })\n                    }\n                >\n                    {app.translator.trans('xsoft-mason-tag.forum.discussion-controls.edit-answers')}\n                </Button>\n            );\n        }\n\n        if (app.forum.attribute('xsoft-mason-tag.fields-section-title')) {\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('xsoft-mason-tag.fields-section-title')}</h5>);\n        }\n\n        return items;\n    }\n\n    fieldsItems() {\n        const items = new ItemList();\n\n        this.fields.forEach((field) => {\n            // Discussion answers to this field\n            const answers = sortByAttribute(\n                (this.discussion.masonAnswers() || []).filter((answer) => {\n                    // It's necessary to compare the field() relationship\n                    // Because field.suggestedAnswers() won't contain new and user answers\n                    return answer.field() && answer.field().id() === field.id();\n                })\n            );\n\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\n\n            if (answers.length === 0) {\n                if (field.show_when_empty()) {\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('xsoft-mason-tag.forum.post-answers.no-answer')}</em>);\n                } else {\n                    // If the field has no answer and the setting is off we don't show it\n                    return;\n                }\n            }\n\n            items.add(\n                `field-${field.id()}`,\n                <div className=\"Mason-Field Form-group\">\n                    <label>\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\n                        {field.name()}\n                    </label>\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\n                </div>\n            );\n        });\n\n        return items;\n    }\n}\n","/**\n * Split an array into multiple arrays of a given size.\n *\n * Useful for grid layouts.\n *\n * @see https://stackoverflow.com/a/64777515/11091039\n * @param arr Array of items\n * @param size Number of items per array\n */\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\n    return Array(Math.ceil(arr.length / size))\n        .fill(undefined)\n        .map((_, i) => arr.slice(size * i, size + size * i));\n}\n","import app from 'flarum/forum/app';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport Forum from 'flarum/common/models/Forum';\nimport Answer from '@common/models/Answer';\nimport Field from '@common/models/Field';\nimport ByTag from '@common/models/ByTag';\nimport addComposerFields from './addComposerFields';\nimport addFieldUpdateControl from './addFieldUpdateControl';\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\nimport patchModelIdentifier from './patchModelIdentifier';\n\napp.initializers.add('xsoft-ict-mason-tag', (app) => {\n    app.store.models['mason-fields'] = Field;\n    app.store.models['mason-answers'] = Answer;\n    app.store.models['mason-bytags'] = ByTag;\n\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\n\n    addComposerFields();\n    addFieldsOnDiscussionHero();\n    addFieldsOnDiscussionPost();\n    addFieldUpdateControl();\n    patchModelIdentifier();\n});\n","import { override } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Answer from '@common/models/Answer';\n\nexport default function () {\n    override(Model, 'getIdentifier', function (original, model) {\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\n        // That way they can be created server-side without making individual API requests for each answer\n        if (model instanceof Answer && !model.exists) {\n            return {\n                type: model.data.type,\n                attributes: {\n                    content: model.data.attributes.content,\n                },\n                relationships: {\n                    field: {\n                        data: Model.getIdentifier(model.data.relationships.field),\n                    },\n                },\n            };\n        }\n\n        // Default behaviour\n        return original(model);\n    });\n}\n","module.exports = flarum.core.compat['common/Component'];","module.exports = flarum.core.compat['common/Model'];","module.exports = flarum.core.compat['common/components/Button'];","module.exports = flarum.core.compat['common/components/CommentPost'];","module.exports = flarum.core.compat['common/components/DiscussionComposer'];","module.exports = flarum.core.compat['common/components/DiscussionHero'];","module.exports = flarum.core.compat['common/components/DiscussionPage'];","module.exports = flarum.core.compat['common/components/Modal'];","module.exports = flarum.core.compat['common/extend'];","module.exports = flarum.core.compat['common/helpers/icon'];","module.exports = flarum.core.compat['common/models/Discussion'];","module.exports = flarum.core.compat['common/models/Forum'];","module.exports = flarum.core.compat['common/utils/ItemList'];","module.exports = flarum.core.compat['common/utils/classList'];","module.exports = flarum.core.compat['common/utils/computed'];","module.exports = flarum.core.compat['components/Composer'];","module.exports = flarum.core.compat['forum/app'];","module.exports = flarum.core.compat['forum/utils/DiscussionControls'];","module.exports = flarum.core.compat['tags/components/TagDiscussionModal'];","module.exports = flarum.core.compat['tags/utils/sortTags'];","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["sortByAttribute","items","attr","sort","a","b","Model","Answer","_Model","_inheritsLoose","_this","_len","arguments","length","args","Array","_key","call","apply","concat","content","attribute","is_suggested","field","hasOne","_proto","prototype","apiEndpoint","exists","data","id","default","ByTag","tag_name","tag_id","field_name","computed","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","transformDate","allAnswers","hasMany","suggestedAnswers","required","multiple","extend","app","DiscussionComposer","Composer","FieldsEditor","FieldsEditorByTags","ByTagsComposer","TagDiscussionModal","masonAnswers","byTagEnabled","resources","attributes","ByTagsUnit","dTag","tagChanged","e","selected","forum","canFillMasonFields","matchingTags","matchTags","myFields","i","tagName","fields","composer","add","m","bytags","tags","answers","onchange","ontagchange","relationships","DiscussionControls","Button","FieldsEditorModal","discussion","canUpdateMasonAnswers","onclick","modal","show","translator","trans","override","DiscussionHero","FieldsViewer","attrs","canSeeMasonAnswers","original","position","$composer","$","stop","composerHeight","outerHeight","redraw","headerHeight","PositionEnum","NORMAL","height","updateHeight","CommentPost","DiscussionPage","showFieldsOnPost","post","current","matches","number","subtree","check","map","answer","JSON","stringify","join","postHeaderIndex","findIndex","item","className","splice","Component","_Component","store","all","tagsList","tempStorage","usedList","_loop","fieldIDs","tagsObj","filter","match","forEach","push","FieldEditDropdown","view","vnode","_vnode$attrs","selectedAnswerIdsForThisField","answerIndex","relationshipInfo","getIdentifier","event","_iterator","_createForOfIteratorHelperLoose","target","options","_step","done","option","value","answerId","storeObj","getById","disabled","hidden","placeholderHidden","selectPlaceholder","indexOf","text","sortTags","classList","DiscussionFields","oninit","selectedTags","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","inputUuid","Math","random","toString","substring","_classList","_this2","currentSelectedChild","parent","fieldRequired","fieldLabel","find","FieldEditText","inputId","answersForThisField","oninput","createRecord","placeholder","fieldPlaceholder","chunkArray","FieldGrid","row","ItemList","FieldEditTags","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","_this3","inputAttrs","input","'['","Modal","_Modal","dirty","processing","tagRelationship","thisIncludes","payload","included","findTag","element","type","title","answersChanged","bind","loading","saveAnswers","temporaryDiscussion","pushData","save","then","close","err","head","fieldsItems","answer_list","arr","size","ceil","fill","undefined","_","slice","Discussion","Forum","addComposerFields","addFieldUpdateControl","addFieldsOnDiscussionHero","addFieldsOnDiscussionPost","patchModelIdentifier","initializers","models","model","setPrototypeOf","subClass","superClass","Object","create","constructor","_setPrototypeOf","o","p","__proto__"],"sourceRoot":""}